{"version":3,"file":"lite-youtube.js","sourceRoot":"","sources":["lite-youtube.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n *\n * The shadowDom / Intersection Observer version of Paul's concept:\n * https://github.com/paulirish/lite-youtube-embed\n *\n * A lightweight YouTube embed. Still should feel the same to the user, just\n * MUCH faster to initialize and paint.\n *\n * Thx to these as the inspiration\n *   https://storage.googleapis.com/amp-vs-non-amp/youtube-lazy.html\n *   https://autoplay-youtube-player.glitch.me/\n *\n * Once built it, I also found these (👍👍):\n *   https://github.com/ampproject/amphtml/blob/master/extensions/amp-youtube\n *   https://github.com/Daugilas/lazyYT https://github.com/vb/lazyframe\n */\nexport class LiteYTEmbed extends HTMLElement {\n  shadowRoot!: ShadowRoot;\n  private domRefFrame!: HTMLDivElement;\n  private domRefImg!: {\n    fallback: HTMLImageElement;\n    webp: HTMLSourceElement;\n    jpeg: HTMLSourceElement;\n  };\n  private domRefPlayButton!: HTMLButtonElement;\n  private static isPreconnected = false;\n  private isIframeLoaded = false;\n\n  constructor() {\n    super();\n    this.setupDom();\n  }\n\n  static get observedAttributes(): string[] {\n    return ['videoid', 'playlistid'];\n  }\n\n  connectedCallback(): void {\n    this.addEventListener('pointerover', LiteYTEmbed.warmConnections, {\n      once: true,\n    });\n\n    this.addEventListener('click', () => this.addIframe());\n  }\n\n  get videoId(): string {\n    return encodeURIComponent(this.getAttribute('videoid') || '');\n  }\n\n  set videoId(id: string) {\n    this.setAttribute('videoid', id);\n  }\n\n  get playlistId(): string {\n    return encodeURIComponent(this.getAttribute('playlistid') || '');\n  }\n\n  set playlistId(id: string) {\n    this.setAttribute('playlistid', id);\n  }\n\n  get videoTitle(): string {\n    return this.getAttribute('videotitle') || 'Video';\n  }\n\n  set videoTitle(title: string) {\n    this.setAttribute('videotitle', title);\n  }\n\n  get videoPlay(): string {\n    return this.getAttribute('videoPlay') || 'Play';\n  }\n\n  set videoPlay(name: string) {\n    this.setAttribute('videoPlay', name);\n  }\n\n  get videoStartAt(): string {\n    return this.getAttribute('videoStartAt') || '0';\n  }\n\n  get autoLoad(): boolean {\n    return this.hasAttribute('autoload');\n  }\n\n  get noCookie(): boolean {\n    return this.hasAttribute('nocookie');\n  }\n\n  get posterQuality(): string {\n    return this.getAttribute('posterquality') || 'hqdefault';\n  }\n\n  get posterLoading(): HTMLImageElement['loading'] {\n    return (\n      (this.getAttribute('posterloading') as HTMLImageElement['loading']) ||\n      'lazy'\n    );\n  }\n\n  get params(): string {\n    return `start=${this.videoStartAt}&${this.getAttribute('params')}`;\n  }\n\n  set params(opts: string) {\n    this.setAttribute('params', opts);\n  }\n\n  /**\n   * Define our shadowDOM for the component\n   */\n  private setupDom(): void {\n    const shadowDom = this.attachShadow({ mode: 'open' });\n    let nonce = '';\n    if (window.liteYouTubeNonce) {\n      nonce = `nonce=\"${window.liteYouTubeNonce}\"`;\n    }\n    shadowDom.innerHTML = `\n      <style ${nonce}>\n        :host {\n          contain: content;\n          display: block;\n          position: relative;\n          width: 100%;\n          padding-bottom: calc(100% / (16 / 9));\n        }\n\n        @media (max-width: 40em) {\n          :host([short]) {\n            padding-bottom: calc(100% / (9 / 16));\n          }\n        }\n\n        #frame, #fallbackPlaceholder, iframe {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          left: 0;\n        }\n\n        #frame {\n          cursor: pointer;\n        }\n\n        #fallbackPlaceholder {\n          object-fit: cover;\n        }\n\n        #frame::before {\n          content: '';\n          display: block;\n          position: absolute;\n          top: 0;\n          background-image: linear-gradient(180deg, #111 -20%, transparent 90%);\n          height: 60px;\n          width: 100%;\n          z-index: 1;\n        }\n\n        #playButton {\n          width: 68px;\n          height: 48px;\n          background-color: transparent;\n          background-image: url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 68 48\"><path d=\"M66.52 7.74c-.78-2.93-2.49-5.41-5.42-6.19C55.79.13 34 0 34 0S12.21.13 6.9 1.55c-2.93.78-4.63 3.26-5.42 6.19C.06 13.05 0 24 0 24s.06 10.95 1.48 16.26c.78 2.93 2.49 5.41 5.42 6.19C12.21 47.87 34 48 34 48s21.79-.13 27.1-1.55c2.93-.78 4.64-3.26 5.42-6.19C67.94 34.95 68 24 68 24s-.06-10.95-1.48-16.26z\" fill=\"red\"/><path d=\"M45 24 27 14v20\" fill=\"white\"/></svg>');\n          z-index: 1;\n          border: 0;\n          border-radius: inherit;\n        }\n\n        #playButton:before {\n          content: '';\n          border-style: solid;\n          border-width: 11px 0 11px 19px;\n          border-color: transparent transparent transparent #fff;\n        }\n\n        #playButton,\n        #playButton:before {\n          position: absolute;\n          top: 50%;\n          left: 50%;\n          transform: translate3d(-50%, -50%, 0);\n          cursor: inherit;\n        }\n\n        /* Post-click styles */\n        .activated {\n          cursor: unset;\n        }\n\n        #frame.activated::before,\n        #frame.activated > #playButton {\n          display: none;\n        }\n      </style>\n      <div id=\"frame\">\n        <picture>\n          <source id=\"webpPlaceholder\" type=\"image/webp\">\n          <source id=\"jpegPlaceholder\" type=\"image/jpeg\">\n          <img id=\"fallbackPlaceholder\" referrerpolicy=\"origin\" loading=\"lazy\">\n        </picture>\n        <button id=\"playButton\"></button>\n      </div>\n    `;\n    this.domRefFrame = shadowDom.querySelector<HTMLDivElement>('#frame')!;\n    this.domRefImg = {\n      fallback: shadowDom.querySelector('#fallbackPlaceholder')!,\n      webp: shadowDom.querySelector('#webpPlaceholder')!,\n      jpeg: shadowDom.querySelector('#jpegPlaceholder')!,\n    };\n    this.domRefPlayButton = shadowDom.querySelector('#playButton')!;\n  }\n\n  /**\n   * Parse our attributes and fire up some placeholders\n   */\n  private setupComponent(): void {\n    this.initImagePlaceholder();\n\n    this.domRefPlayButton.setAttribute(\n      'aria-label',\n      `${this.videoPlay}: ${this.videoTitle}`\n    );\n    this.setAttribute('title', `${this.videoPlay}: ${this.videoTitle}`);\n\n    if (this.autoLoad || this.isYouTubeShort()) {\n      this.initIntersectionObserver();\n    }\n  }\n\n  /**\n   * Lifecycle method that we use to listen for attribute changes to period\n   * @param {*} name\n   * @param {*} oldVal\n   * @param {*} newVal\n   */\n  attributeChangedCallback(\n    name: string,\n    oldVal: unknown,\n    newVal: unknown\n  ): void {\n    switch (name) {\n      case 'videoid':\n      case 'playlistid':\n      case 'videoTitle':\n      case 'videoPlay': {\n        if (oldVal !== newVal) {\n          this.setupComponent();\n\n          // if we have a previous iframe, remove it and the activated class\n          if (this.domRefFrame.classList.contains('activated')) {\n            this.domRefFrame.classList.remove('activated');\n            this.shadowRoot.querySelector('iframe')!.remove();\n            this.isIframeLoaded = false;\n          }\n        }\n        break;\n      }\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Inject the iframe into the component body\n   * @param {boolean} isIntersectionObserver\n   */\n  private addIframe(isIntersectionObserver = false): void {\n    if (!this.isIframeLoaded) {\n      // Don't autoplay the intersection observer injection, it's weird\n      let autoplay = isIntersectionObserver ? 0 : 1;\n      const wantsNoCookie = this.noCookie ? '-nocookie' : '';\n      let embedTarget;\n      if (this.playlistId) {\n        embedTarget = `?listType=playlist&list=${this.playlistId}&`;\n      } else {\n        embedTarget = `${this.videoId}?`;\n      }\n\n      // Oh wait, you're a YouTube short, so let's try to make you more workable\n      if (this.isYouTubeShort()) {\n        this.params = `loop=1&mute=1&modestbranding=1&playsinline=1&rel=0&enablejsapi=1&playlist=${this.videoId}`;\n        autoplay = 1;\n      }\n\n      const iframeHTML = `\n<iframe frameborder=\"0\" title=\"${this.videoTitle}\"\n  allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen\n  src=\"https://www.youtube${wantsNoCookie}.com/embed/${embedTarget}autoplay=${autoplay}&${this.params}\"\n></iframe>`;\n      this.domRefFrame.insertAdjacentHTML('beforeend', iframeHTML);\n      this.domRefFrame.classList.add('activated');\n      this.isIframeLoaded = true;\n      this.attemptShortAutoPlay();\n      this.dispatchEvent(\n        new CustomEvent('liteYoutubeIframeLoaded', {\n          detail: {\n            videoId: this.videoId,\n          },\n          bubbles: true,\n          cancelable: true,\n        })\n      );\n    }\n  }\n\n  /**\n   * Setup the placeholder image for the component\n   */\n  private initImagePlaceholder(): void {\n    const posterUrlWebp = `https://i.ytimg.com/vi_webp/${this.videoId}/${this.posterQuality}.webp`;\n    const posterUrlJpeg = `https://i.ytimg.com/vi/${this.videoId}/${this.posterQuality}.jpg`;\n    this.domRefImg.fallback.loading = this.posterLoading;\n    this.domRefImg.webp.srcset = posterUrlWebp;\n    this.domRefImg.jpeg.srcset = posterUrlJpeg;\n    this.domRefImg.fallback.src = posterUrlJpeg;\n    this.domRefImg.fallback.setAttribute(\n      'aria-label',\n      `${this.videoPlay}: ${this.videoTitle}`\n    );\n    this.domRefImg?.fallback?.setAttribute(\n      'alt',\n      `${this.videoPlay}: ${this.videoTitle}`\n    );\n  }\n\n  /**\n   * Setup the Intersection Observer to load the iframe when scrolled into view\n   */\n  private initIntersectionObserver(): void {\n    const options = {\n      root: null,\n      rootMargin: '0px',\n      threshold: 0,\n    };\n\n    const observer = new IntersectionObserver((entries, observer) => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting && !this.isIframeLoaded) {\n          LiteYTEmbed.warmConnections();\n          this.addIframe(true);\n          observer.unobserve(this);\n        }\n      });\n    }, options);\n\n    observer.observe(this);\n  }\n\n  /**\n   * This is a terrible hack to attempt to get YouTube Short-like autoplay on\n   * mobile viewports. It's this way because:\n   * 1. YouTube's Iframe embed does not offer determinism when loading\n   * 2. Attempting to use onYouTubeIframeAPIReady() does not work in 99% of\n   *    cases\n   * 3. You can _technically_ load the Frame API library and do more advanced\n   *    things, but I don't want to burn the thread of the wire with its\n   *    shenanigans since this an edge case.\n   * @private\n   */\n  private attemptShortAutoPlay() {\n    if (this.isYouTubeShort()) {\n      setTimeout(() => {\n        this.shadowRoot\n          .querySelector('iframe')\n          ?.contentWindow?.postMessage(\n            '{\"event\":\"command\",\"func\":\"' + 'playVideo' + '\",\"args\":\"\"}',\n            '*'\n          );\n        // for youtube video recording demo\n      }, 2000);\n    }\n  }\n\n  /**\n   * A hacky attr check and viewport peek to see if we're going to try to enable\n   * a more friendly YouTube Short style loading\n   * @returns boolean\n   */\n  private isYouTubeShort(): boolean {\n    return (\n      this.getAttribute('short') === '' &&\n      window.matchMedia('(max-width: 40em)').matches\n    );\n  }\n\n  /**\n   * Add a <link rel={preload | preconnect} ...> to the head\n   * @param {string} kind\n   * @param {string} url\n   * @param {string} as\n   */\n  private static addPrefetch(kind: string, url: string): void {\n    const linkElem = document.createElement('link');\n    linkElem.rel = kind;\n    linkElem.href = url;\n    linkElem.crossOrigin = 'true';\n    document.head.append(linkElem);\n  }\n\n  /**\n   * Begin preconnecting to warm up the iframe load Since the embed's network\n   * requests load within its iframe, preload/prefetch'ing them outside the\n   * iframe will only cause double-downloads. So, the best we can do is warm up\n   * a few connections to origins that are in the critical path.\n   *\n   * Maybe `<link rel=preload as=document>` would work, but it's unsupported:\n   * http://crbug.com/593267 But TBH, I don't think it'll happen soon with Site\n   * Isolation and split caches adding serious complexity.\n   */\n  private static warmConnections(): void {\n    if (LiteYTEmbed.isPreconnected || window.liteYouTubeIsPreconnected) return;\n    // we don't know which image type to preload, so warm the connection\n    LiteYTEmbed.addPrefetch('preconnect', 'https://i.ytimg.com/');\n\n    // Host that YT uses to serve JS needed by player, per amp-youtube\n    LiteYTEmbed.addPrefetch('preconnect', 'https://s.ytimg.com');\n\n    // The iframe document and most of its subresources come right off\n    // youtube.com\n    LiteYTEmbed.addPrefetch('preconnect', 'https://www.youtube.com');\n\n    // The botguard script is fetched off from google.com\n    LiteYTEmbed.addPrefetch('preconnect', 'https://www.google.com');\n\n    // TODO: Not certain if these ad related domains are in the critical path.\n    // Could verify with domain-specific throttling.\n    LiteYTEmbed.addPrefetch(\n      'preconnect',\n      'https://googleads.g.doubleclick.net'\n    );\n    LiteYTEmbed.addPrefetch('preconnect', 'https://static.doubleclick.net');\n    LiteYTEmbed.isPreconnected = true;\n\n    // multiple embeds in the same page don't check for each other\n    window.liteYouTubeIsPreconnected = true;\n  }\n}\n// Register custom element\ncustomElements.define('lite-youtube', LiteYTEmbed);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'lite-youtube': LiteYTEmbed;\n  }\n  interface Window {\n    liteYouTubeNonce: string;\n    liteYouTubeIsPreconnected: boolean;\n  }\n}\n"]}